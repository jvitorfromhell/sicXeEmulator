#include <gtkmm.h>
#include <iostream>
#include <fstream>
#include <vector>
#include <string.h>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include "Instrucao.h"
#include "Registradores.h"
#include "Dado.h"
#include "SIC.h"
#include "simulador.h"

using namespace std;

int hexToInt(char h);
int localizarDado(int end);
void salvarNaMemoria(int end, int val);
bool isInstruction(int opcode);

vector<Instrucao> instrucoes;
vector<Dado> dados;

SIC Processador;

int main(int argc, char *argv[])
{
	Glib::RefPtr<Gtk::Application> aplicacao = Gtk::Application::create(argc, argv, "");
	
	Instrucao *instrucao;
	int opcode; int nixbpe[6];
    int i2, iDado = 0;

	FILE *fp;
    fp = fopen("entrada.txt","r");
    
    if(fp == NULL){
        printf("Erro ao ler o arquivo de entrada.\n");
        exit(1);
    }
    
    char **str;
    str = (char**) malloc(1048576*sizeof(char)); // ponteiro para strings
    *str = (char*) malloc(9*sizeof(char)); // ponteiro de char, string
    int i = 0;
   
    while(fscanf(fp,"%s",str[i]) != EOF){
        i++;
        str[i] = (char*) malloc(8*sizeof(char));
    }
    
    fclose(fp);

	for(i2 = 0; i2 < i; i2++){
                
        switch (strlen(str[i2]) / 2){ // a cada 2 digitos, um byte
            case 1: {//instrução de 1 byte
                	opcode = strtol(str[i2], NULL, 16); //converte em base 16

                	if(isInstruction(opcode)) {
                    	instrucao = new Instrucao(opcode);
						instrucoes.push_back(*instrucao);
					}
                	else {
                    	Dado *d = new Dado(strtol(str[i2], NULL, 16),i2);
                    	dados.push_back(*d);
                    	iDado++;
                	}                    
                	break;
            	}

            case 2: {//instrução de 2 bytes
                
                	char r1[1],r2[1],op[2];
                	r2[0] = str[i2][3];
                	r2[1] = '\0';
                	r1[0] = str[i2][2];
                	r1[1] = '\0';
                	op[0] = str[i2][0];
                	op[1] = str[i2][1];
                	op[2] = '\0';
                
                	opcode = strtol(op, NULL, 16);

                	if(isInstruction(opcode)){
                	    instrucao = new Instrucao(opcode,strtol(r1,NULL,16),hexToInt(str[i2][3]));
						instrucoes.push_back(*instrucao);
                     }
                	else {
                    	Dado *d = new Dado(strtol(str[i2], NULL, 16),i2);
                    	dados.push_back(*d);
                    	iDado++;
                    }
                
 	               break;
    	        }
            case 3: {
                    char displacement[4],resto[4];
                
                	displacement[0] = str[i2][3];
                	displacement[1] = str[i2][4];
                	displacement[2] = str[i2][5];
               		displacement[3] = '\0';
                
                	resto[0] = str[i2][0];
                	resto[1] = str[i2][1];
                	resto[2] = str[i2][2]; //invertidos os 3,4,5 para 5,4,3
                	resto[3] = '\0';
                
                    int temp = strtol(resto, NULL, 16);
                
                	nixbpe[0] = (temp & 0x20) >> 5; //invertidos os indices as 2hs da manha
                	nixbpe[1] = (temp & 0x10) >> 4; //desinvertidos as 8:30
                	nixbpe[2] = (temp & 0x08) >> 3;
                	nixbpe[3] = (temp & 0x04) >> 2;
                	nixbpe[4] = (temp & 0x02) >> 1;
                	nixbpe[5] = (temp & 0x01);
                 
                	opcode = (temp & 0xFC0) >> 6;
                
                	if(isInstruction(opcode)){
                	    instrucao = new Instrucao(opcode, nixbpe, strtol(displacement, NULL, 16));
						instrucoes.push_back(*instrucao);
                	}
                	else {
                    	Dado *d = new Dado(strtol(str[i2], NULL, 10), i2);
                    	dados.push_back(*d);
                    	iDado++;
                    }
                	break;
            	}
            case 4:{//instrução de 4 bytes
                   char adress[6],setup[4];
                
                	adress[0] = str[i2][3]; // invertidos 0,1,2.. para 4,3...
                	adress[1] = str[i2][4];
                	adress[2] = str[i2][5];
                	adress[3] = str[i2][6];
                	adress[4] = str[i2][7];
                	adress[5] = '\0';
                
                	setup[0] = str[i2][0];
                	setup[1] = str[i2][1];
                	setup[2] = str[i2][2];
                	setup[3] = '\0';
                             
                	int temp = strtol(setup,NULL, 16);
                
                	nixbpe[0] = (temp & 0x20) >> 5; //invertidos os indices as 2hs da manha
                	nixbpe[1] = (temp & 0x10) >> 4;
                	nixbpe[2] = (temp & 0x08) >> 3;
                	nixbpe[3] = (temp & 0x04) >> 2;
                	nixbpe[4] = (temp & 0x02) >> 1;
                	nixbpe[5] = (temp & 0x01);
                
                	opcode = (temp & 0xFC0) >> 6;
                
	                if(isInstruction(opcode)){
    	                instrucao = new Instrucao(opcode, nixbpe, strtol(adress, NULL, 16), 12);
						instrucoes.push_back(*instrucao);// o quarto parametro é só pra poder sobrecarregar o contrutor aheueaheauheauea
                    }
    	            else{
                        Dado *d = new Dado(strtol(str[i2], NULL, 16), i2);
    	                dados.push_back(*d);
    	                iDado++;
                    }
    	            break;
    	        }             
    	    }

	}

  	Simulador sim;

	for(int i=0; i < iDado; i++) {
		sim.adicionar_celMem(dados[i].getEndereco(), dados[i].getDado());
	}

	return aplicacao->run(sim);
}

int hexToInt(char h) {
    if ((h >= '0') && (h <= '9')) {
        return (h - '0');
    }
    if ((h >= 'a') && (h <= 'f')) {
        return ((h - 'a') + 10);
    }
    if ((h >= 'A') && (h <= 'F')) {
        return ((h - 'A') + 10);
    }
}


bool isInstruction(int opcode){
    switch (opcode) {
            /*Instruções Aritmeticas*/
        case 0x18:
        case 0x58:
        case 0x90:
        case 0x24:
        case 0x64:
        case 0x9C:
        case 0x60:
        case 0x98:
        case 0x1C:
        case 0x5C:
        case 0x94:
            /*Instruções Logicas*/
        case 0x40:
        case 0xB4:
        case 0x28:
        case 0x88:
        case 0xA0:
        case 0x44:
        case 0xA4:
        case 0xA8:
            /*Instruções de Jump*/
        case 0x3C:
        case 0x30:
        case 0x34:
        case 0x38:
        case 0x48:
        case 0x4C:
            /*Instruções store ou load*/
        case 0x00:
        case 0x68:
        case 0x50:
        case 0x70:
        case 0x08:
        case 0x6C:
        case 0x74:
        case 0x04:
        case 0xD0:
        case 0x0C:
        case 0x78:
        case 0x54:
        case 0x80:
        case 0xD4:
        case 0x14:
        case 0x7C:
        case 0xE8:
        case 0x84:
        case 0x10:
        case 0xAC:
            /*Outras Instruções*/
        case 0xC4:
        case 0xC0: return true;
        default: return false;
    }
}

int localizarDado(int end) {
	for (int i=0; i < dados.size(); i++)
		if (dados[i].getEndereco() == end)
			return dados[i].getDado();	
	return 0;
}

void salvarNaMemoria(int end, int val) {
	for (int i=0; i < dados.size(); i++)
		if (dados[i].getEndereco() == end){
			dados[i].setDado(val);
			return;
		}
	Dado *d = new Dado(val, end);
  	dados.push_back(*d);
}

int SIC::getReg(int index) {
	return registradores.getPorIndice(index);
}

void SIC::AND_m(int indiceMemo){//faz uma and entre o acumulador e o conteúdo da posição de memória informada, armazena o resultado no acumulador
    registradores.setA(registradores.getA() & localizarDado(indiceMemo));
}

void SIC::OR_m(int indiceMemo){//faz uma or entre o acumulador e o conteúdo da posição de memória informada, armazena o resultado no acumulador
    registradores.setA(registradores.getA() | localizarDado(indiceMemo) );
}

void SIC::CLEAR_r1(int indiceR1){//limpa o registrador informado
    if(indiceR1 == 6 || indiceR1 == 7)
        registradores.setF(0); registradores.setFFloat(0);
    registradores.setPorIndice(indiceR1, 0);
}

void SIC::COMP_m(int indiceMemo){//compara conteúdo do acumulador com o conteúdo da posição de memória indicada e seta SW de acordo(1 se maior, 0 se igual, -1 se menor)
    if (registradores.getA() > localizarDado(indiceMemo))
        registradores.setSW(1);
    if (registradores.getA() == localizarDado(indiceMemo))
        registradores.setSW(0);
    else
        registradores.setSW(-1);
}

void SIC::COMPR_r1r2(int indiceR1, int indiceR2){//compara o conteúdo dos registradores r1 e r2 informados e seta SW de acordo(1 se maior, 0 se igual, -1 se menor)
    if(registradores.getPorIndice(indiceR1) > registradores.getPorIndice(indiceR2))
        registradores.setSW(1);
    if (registradores.getPorIndice(indiceR1) == registradores.getPorIndice(indiceR2))
        registradores.setSW(0);
    else
        registradores.setSW(-1);
}

void SIC::SHIFTR_r1n(int indiceR1, int nvezes){ //shifta o registrador r1 informado nvezes para a direita
    int i, x;
    for(i = 0; i < nvezes; i++){
        x = (registradores.getPorIndice(indiceR1) & 1);
        registradores.setPorIndice(indiceR1, registradores.getPorIndice(indiceR1) >> 1);
        if (x == 1)
            registradores.setPorIndice(indiceR1, (registradores.getPorIndice(indiceR1) & 8388608));   
    }
}

void SIC::SHIFTL_r1n(int indiceR1, int nvezes){ //shifta o registrador r1 informado nvezes para a esquerda
    int i, x;
    for(i = 0; i < nvezes; i++){
        x = (registradores.getPorIndice(indiceR1) & 8388608);
        registradores.setPorIndice(indiceR1, registradores.getPorIndice(indiceR1) << 1);
        if(x == 1)
            registradores.setPorIndice(indiceR1, (registradores.getPorIndice(indiceR1) & 4278190079));
    }
}

void SIC::ADDR_r1r2(int indiceR1, int indiceR2){ //soma r2 com r1 e armazena o resultado em r2
    registradores.setPorIndice(indiceR2, registradores.getPorIndice(indiceR2) + registradores.getPorIndice(indiceR1));
}

void SIC::ADD_m(int indiceMemo) { //soma o conteúdo do acumulador com o conteúdo da posição de memória informado, armazena o resultado no acumulador
    registradores.setA(registradores.getA() + localizarDado(indiceMemo));
}

void SIC::RMO_r1r2(int indiceR1, int indiceR2) { //copiar conteúdo de r1 pra r2
    registradores.setPorIndice(indiceR2, registradores.getPorIndice(indiceR1));
}

void SIC::DIV_m(int indiceMemo){//divide o conteúdo do acumulador por m e coloca o resultado no acumulador
    registradores.setA(registradores.getA() / localizarDado(indiceMemo));
}

void SIC::DIVR_r1r2(int indiceR1, int indiceR2){//divide r2 por r1 e coloca o resultado em r2
    registradores.setPorIndice(indiceR2, registradores.getPorIndice(indiceR2) / registradores.getPorIndice(indiceR1));
}

void SIC::MULR_r1r2(int indiceR1, int indiceR2){//multiplica r2 e r1 e coloca o resultado em r2
    registradores.setPorIndice(indiceR2, registradores.getPorIndice(indiceR2) * registradores.getPorIndice(indiceR1));
}

void SIC::SUB_m(int indiceMemo){//subtrai o conteúdo do acumulador por m e coloca o resultado no acumulador
    registradores.setA(registradores.getA() - localizarDado(indiceMemo));
}

void SIC::SUBR_r1r2(int indiceR1, int indiceR2){//subtrai r2 por r1 e coloca o resultado em r2
    registradores.setPorIndice(indiceR2, (registradores.getPorIndice(indiceR2) - registradores.getPorIndice(indiceR1)));
}

void SIC::J_m(int indiceMemo){//PC recebe o conteúdo da posição de memória informada
    registradores.setPC(localizarDado(indiceMemo));
}

void SIC::JEQ_m(int indiceMemo){//se SW for igual a 0(representa o símbolo de igual), PC recebe o conteúdo da posição de memória informada
    if(registradores.getSW() == 0)
        registradores.setPC(localizarDado(indiceMemo));
}

void SIC::JGT_m(int indiceMemo){//se SW for igual a 1(representa o símbolo de maior que), PC recebe o conteúdo da posição de memória informada
    if( registradores.getSW() == 1)
        registradores.setPC(localizarDado(indiceMemo));
}

void SIC::JLT_m(int indiceMemo){//se SW for igual a -1(representa o símbolo de menor que), PC recebe o conteúdo da posição de memória informada
    if(registradores.getSW() == -1)
        registradores.setPC(localizarDado(indiceMemo));
}

void SIC::JSUB_m(int indiceMemo){//não sei o que faz, mas creio que seja assim
    registradores.setL(registradores.getPC());
    registradores.setPC(localizarDado(indiceMemo));
}

void SIC::RSUB(){//não sei o que faz, mas creio que seja assim
    registradores.setPC(registradores.getL());
}

void SIC::LDA_m(int indiceMemo){//coloca no acumulador o conteúdo da posição de memória informada
    registradores.setA(localizarDado(indiceMemo));
}

void SIC::LDB_m(int indiceMemo){//coloca no registrador B o conteúdo da posição de memória informada
    registradores.setB(localizarDado(indiceMemo));
}

void SIC::LDCH_m(int indiceMemo){//coloca no acumulador o byte menos significante do conteúdo da posição de memória informada
    int shift;
    shift = localizarDado(indiceMemo);
    registradores.setA(shift >> 16);
}

void SIC::LDL_m(int indiceMemo){//coloca no registrador L o conteúdo da posição de memória informada
    registradores.setL(localizarDado(indiceMemo));
}

void SIC::LDS_m(int indiceMemo){//coloca no registrador S o conteúdo da posição de memória informada
    registradores.setS(localizarDado(indiceMemo));
}

void SIC::LDT_m(int indiceMemo){//coloca no registrador T o conteúdo da posição de memória informada
    registradores.setT(localizarDado(indiceMemo));
}

void SIC::LDX_m(int indiceMemo){//coloca no registrador X o conteúdo da posição de memória informada
    registradores.setX(localizarDado(indiceMemo));
}

void SIC::STA_m(int indiceMemo){//coloca na posição de memória informada o conteúdo do acumulador
    salvarNaMemoria(indiceMemo, registradores.getA());
}

void SIC::STB_m(int indiceMemo){//coloca na posição de memória informada o conteúdo do registrador B
    salvarNaMemoria(indiceMemo, registradores.getB());
}

void SIC::STCH_m(int indiceMemo){//coloca na posição de memória informada o byte menos significativo do acumulador
    int shift;
    shift = registradores.getA();
    salvarNaMemoria(indiceMemo,  (shift >> 16));
}

void SIC::STL_m(int indiceMemo){//coloca na posição de memória informada o conteúdo do registrador L
    salvarNaMemoria(indiceMemo, registradores.getL());
}

void SIC::STS_m(int indiceMemo){//coloca na posição de memória informada o conteúdo do registrador S
    salvarNaMemoria(indiceMemo, registradores.getS());
}

void SIC::STSW_m(int indiceMemo){//coloca na posição de memória informada o conteúdo do registrador SW
    salvarNaMemoria(indiceMemo, registradores.getSW());
}

void SIC::STT_m(int indiceMemo){//coloca na posição de memória informada o conteúdo do registrador T
    salvarNaMemoria(indiceMemo, registradores.getT());
}

void SIC::STX_m(int indiceMemo){//coloca na posição de memória informada o conteúdo do registrador X
    salvarNaMemoria(indiceMemo, registradores.getX());
}

void SIC::executaInstrucao(Instrucao instrucao) {
    switch (instrucao.getOpcode()) {
            /*Instruções Aritmeticas*/
        case 0x18:
        {
            ADD_m(instrucao.getAdress());
			break;
        }
        case 0x90:
        {
            ADDR_r1r2(instrucao.getR1(), instrucao.getR2());
			break;
        }
        case 0x24:
        {
            DIV_m(instrucao.getAdress());
			break;
        }
        case 0x9C:
        {
            DIVR_r1r2(instrucao.getR1(), instrucao.getR2());
			break;
        }
        case 0x98:
        {
            MULR_r1r2(instrucao.getR1(), instrucao.getR2());
			break;
        }
        case 0x1C:
        {
            SUB_m(instrucao.getAdress());
			break;
        }
        case 0x94:
        {
            SUBR_r1r2(instrucao.getR1(), instrucao.getR2());
			break;
        }

            /*Instruções Logicas*/
        case 0x40:
        {
            AND_m(instrucao.getAdress());
            break;
        }
        case 0xB4:
        {
            CLEAR_r1(instrucao.getR1());
			break;
        }
        case 0x28:
        {
            COMP_m(instrucao.getAdress());
			break;
        }
        case 0xA0:
        {
            COMPR_r1r2(instrucao.getR1(), instrucao.getR2());
			break;
        }
        case 0x44:
        {
            OR_m(instrucao.getAdress());
			break;
        }
        case 0xA4:
        {
            SHIFTR_r1n(instrucao.getR1(), instrucao.getR2());
			break;
        }
        case 0xA8:
        {
            SHIFTL_r1n(instrucao.getR1(), instrucao.getR2());
			break;
        }

            /*Instruções de Jump*/
        case 0x3C:
        {
            J_m(instrucao.getAdress());
			break;
        }
        case 0x30:
        {
            JEQ_m(instrucao.getAdress());
			break;
        }
        case 0x34:
        {
            JGT_m(instrucao.getAdress());
			break;
        }
        case 0x38:
        {
            JLT_m(instrucao.getAdress());
			break;
        }
        case 0x48:
        {
            JSUB_m(instrucao.getAdress());
			break;
        }
        case 0x4C:
        {
            RSUB();
			break;
        }

            /*Instruções store ou load*/
        case 0x00:
        {
		    LDA_m(instrucao.getAdress());
            break;
        }
        case 0x68:
        {
            LDB_m(instrucao.getAdress());
			break;
        }
        case 0x50:
        {
            LDCH_m(instrucao.getAdress());
			break;
        }
        case 0x08:
        {
            LDL_m(instrucao.getAdress());
			break;
        }
        case 0x6C:
        {
            LDS_m(instrucao.getAdress());
			break;
        }
        case 0x74:
        {
            LDT_m(instrucao.getAdress());
			break;
        }
        case 0x04:
        {
            LDX_m(instrucao.getAdress());
			break;
        }
        case 0x0C:
        {
            STA_m(instrucao.getAdress());
			break;
        }
        case 0x78:
        {
            STB_m(instrucao.getAdress());
			break;
        }
        case 0x54:
        {
            STCH_m(instrucao.getAdress());
			break;
        }
        case 0x14:
        {
            STL_m(instrucao.getAdress());
			break;
        }
        case 0x7C:
        {
            STS_m(instrucao.getAdress());
			break;
        }
        case 0xE8:
        {
            STSW_m(instrucao.getAdress());
			break;
        }
        case 0x84:
        {
            STT_m(instrucao.getAdress());
			break;
        }
        case 0x10:
        {
            STX_m(instrucao.getAdress());
			break;
        }
        case 0xAC:
        {
            RMO_r1r2(instrucao.getR1(), instrucao.getR2());
			break;
        }
    }
}
